<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable Setup

//Gravity
grav = 0.2;

//Horizontal and Vertical Speed
hsp = 0;
vsp = 0;

//Jump and Movement Speed
jumpSpeed = 8;
moveSpeed = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Player Input
keyRight = keyboard_check(ord('D'));
keyLeft = -keyboard_check(ord('A'));
keyJump = keyboard_check_pressed(vk_space);
keyJumpHeld = keyboard_check(vk_space);
keyDown = keyboard_check(ord('S'));

//Input Response
move = keyLeft + keyRight;
hsp = move * moveSpeed;
if (vsp &lt; 10) vsp += grav;
if (vsp &lt; 10) vsp += keyDown/2;

if keyboard_check(vk_shift)
{
    hsp = hsp * 1.5
}

if (place_meeting(x,y+1,oWall))
{
    vsp = keyJump * -jumpSpeed
}

//Facing
if keyboard_check_pressed(ord('A'))
{
    image_xscale = -1
}

if keyboard_check_pressed(ord('D'))
{
    image_xscale = 1
}

if image_xscale = 1
{
    direction = 360
}

if image_xscale = -1
{
    direction = 180
}
//Firing

if mouse_check_button_pressed(mb_left) &amp;&amp; sprite_index = sPlayerShotgun{

    shotgunBullet = instance_create(x,y,oShotgunBullet)
    
    shotgunBullet.direction = direction
    shotgunBullet.speed = 600 / room_speed
    shotgunBullet.image_angle = direction + random_range(-5,5)
    
    Kick = 300 / room_speed
    KickDirection = direction + 180
    
    x = x + lengthdir_x(Kick,KickDirection)
    y = y + lengthdir_y(Kick,KickDirection)
    
    audio_play_sound(aShotgunBlast,1,false)
}


//Jumping

if (vsp &lt; 0) &amp;&amp; (!keyJumpHeld) vsp = max(vsp,-jumpSpeed/4)

//Horizontal Collision
if (place_meeting(x+hsp,y,oWall))
{
    while(!place_meeting(x+sign(hsp),y,oWall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,oWall))
{
    while(!place_meeting(x,y+sign(vsp),oWall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

y += vsp;


//Weapon Pickups

shotgunTouchingMe = instance_place(x,y,oShotgun)

if instance_exists(shotgunTouchingMe) {

sprite_index = sPlayerShotgun
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
